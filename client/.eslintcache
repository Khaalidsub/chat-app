[{"F:\\programming\\chat-web\\client\\src\\index.tsx":"1","F:\\programming\\chat-web\\client\\src\\pages\\chat.tsx":"2","F:\\programming\\chat-web\\client\\src\\pages\\register.tsx":"3","F:\\programming\\chat-web\\client\\src\\pages\\login.tsx":"4","F:\\programming\\chat-web\\client\\src\\widgets\\UserCard.tsx":"5","F:\\programming\\chat-web\\client\\src\\pages\\chats.tsx":"6","F:\\programming\\chat-web\\client\\src\\pages\\Sign.tsx":"7","F:\\programming\\chat-web\\client\\src\\Components\\RegisterForm.tsx":"8","F:\\programming\\chat-web\\client\\src\\App.tsx":"9"},{"size":1794,"mtime":1611240933181,"results":"10","hashOfConfig":"11"},{"size":4601,"mtime":1609511304011,"results":"12","hashOfConfig":"11"},{"size":661,"mtime":1609511304012,"results":"13","hashOfConfig":"11"},{"size":788,"mtime":1609511304011,"results":"14","hashOfConfig":"11"},{"size":954,"mtime":1609511304028,"results":"15","hashOfConfig":"11"},{"size":5118,"mtime":1609511304011,"results":"16","hashOfConfig":"11"},{"size":1909,"mtime":1611243382547,"results":"17","hashOfConfig":"11"},{"size":1458,"mtime":1609511304006,"results":"18","hashOfConfig":"11"},{"size":680,"mtime":1611243348116,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"fcjnfp",{"filePath":"23","messages":"24","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\programming\\chat-web\\client\\src\\index.tsx",[],["41","42"],"F:\\programming\\chat-web\\client\\src\\pages\\chat.tsx",["43","44","45","46","47","48","49","50","51","52","53","54"],"import { useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { CHAT_MESSAGES, CURRENT_USER, MESSAGES, MESSAGE_ADDED, SEND_MESSAGE } from \"../utilities/schema\";\r\nimport { chatMessages, chatMessagesVariables, chatMessages_chatMessages } from \"../utilities/__generated__/chatMessages\";\r\nimport { currentUser, currentUser_currentUser } from \"../utilities/__generated__/currentUser\";\r\nimport { messages } from \"../utilities/__generated__/messages\";\r\nimport { sendMessage, sendMessageVariables } from \"../utilities/__generated__/sendMessage\";\r\nimport Message from \"../widgets/Message\";\r\n\r\nexport interface ChatProps {\r\n    currentChat: string\r\n    user: currentUser_currentUser\r\n    chatMessages: chatMessages_chatMessages[]\r\n    subscribeToMore: Function\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Chat: React.FC<ChatProps> = (props: ChatProps) => {\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n    const scrollChat = useRef<any>(null)\r\n\r\n    const scrollToBottom = () => {\r\n        scrollChat.current.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n\r\n    useEffect(scrollToBottom, [props.chatMessages]);\r\n\r\n    useEffect(() => {\r\n        console.log('hello , i have been called', props.chatMessages);\r\n\r\n        const unsubscribe = props.subscribeToMore();\r\n\r\n        return () => unsubscribe()\r\n    }, [props.chatMessages])\r\n\r\n\r\n    const [sendMessage, { loading, error }] = useMutation<sendMessage, sendMessageVariables>(SEND_MESSAGE)\r\n\r\n    const onKeyPress = (e: any) => {\r\n        if (e.key === 'Enter') {\r\n            sendMessage({ variables: { createMessageInput: { chat: props.currentChat, message: message, sender: props.user.id, } } })\r\n            setMessage('')\r\n        }\r\n\r\n\r\n    }\r\n    const ChatMessages = () => {\r\n        return (\r\n            <React.Fragment>\r\n                {  props.chatMessages.map((message) => {\r\n                    const current = message.sender.id === props.user.id ? true : false;\r\n                    const color = message.sender.id === props.user.id ? 'green-100' : 'white';\r\n\r\n                    return <Message current={current} key={message.id} color={color} message={message.message} user={message.sender.username} image=\"https://images.unsplash.com/photo-1541250628459-d8f2f0157289?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjQzMzEwfQ&auto=format&fit=crop&w=1350&q=80\" />\r\n                })}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\" relative h-full\">\r\n\r\n                <div className='h-4/5 w-full overflow-auto'>\r\n\r\n\r\n\r\n\r\n\r\n                    <ChatMessages />\r\n\r\n                    <div ref={scrollChat} />\r\n\r\n                </div>\r\n\r\n                <div className=\"absolute bottom-0 left-0 right-0 w-full h-16 flex justify-between bg-blue-100 outline-none rounded-xl\" >\r\n                    <textarea\r\n                        className=\" outline-none font-sans flex-grow m-2 py-2 px-4 mr-1 rounded-full border border-gray-300 bg-gray-50 resize-none\"\r\n\r\n                        placeholder=\"Message...\"\r\n\r\n                        rows={1}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n\r\n                        onKeyPress={onKeyPress}\r\n                        value={message}\r\n\r\n                    ></textarea>\r\n                    <button className=\"m-2\" onClick={() => { sendMessage({ variables: { createMessageInput: { chat: props.currentChat, message: message, sender: props.user.id, } } }); setMessage('') }} >\r\n                        <svg\r\n                            className=\"svg-inline--fa text-customBlue-light fa-paper-plane fa-w-16 w-12 h-12 py-2 mr-2\"\r\n                            aria-hidden=\"true\"\r\n                            focusable=\"false\"\r\n                            data-prefix=\"fas\"\r\n                            data-icon=\"paper-plane\"\r\n                            role=\"img\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            viewBox=\"0 0 512 512\"\r\n                        >\r\n                            <path\r\n                                fill=\"currentColor\"\r\n                                d=\"M476 3.2L12.5 270.6c-18.1 10.4-15.8 35.6 2.2 43.2L121 358.4l287.3-253.2c5.5-4.9 13.3 2.6 8.6 8.3L176 407v80.5c0 23.6 28.5 32.9 42.5 15.8L282 426l124.6 52.2c14.2 6 30.4-2.9 33-18.2l72-432C515 7.8 493.3-6.8 476 3.2z\"\r\n                            />\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </React.Fragment >\r\n    );\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Chat;","F:\\programming\\chat-web\\client\\src\\pages\\register.tsx",[],"F:\\programming\\chat-web\\client\\src\\pages\\login.tsx",[],"F:\\programming\\chat-web\\client\\src\\widgets\\UserCard.tsx",[],"F:\\programming\\chat-web\\client\\src\\pages\\chats.tsx",["55","56","57"],"import { useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { CREATE_CHAT, USERS } from \"../utilities/schema\";\r\nimport { chats_chats } from \"../utilities/__generated__/chats\";\r\nimport { createChatVariables, createChat } from \"../utilities/__generated__/createChat\";\r\nimport { users } from \"../utilities/__generated__/users\";\r\nimport ChatCard from \"../widgets/ChatCard\";\r\nimport SearchField from \"../widgets/SearchField\";\r\nimport UserCard from \"../widgets/UserCard\";\r\n\r\nexport interface ChatsProps {\r\n    chats: chats_chats[]\r\n    onClick: Function;\r\n    currentUser: string\r\n    currentChat: string\r\n\r\n}\r\n\r\nexport interface Chats {\r\n    isCreatingChat: boolean\r\n\r\n\r\n}\r\n\r\n\r\nconst Chats: React.FC<ChatsProps> = (props: ChatsProps) => {\r\n    const [isCreatingChat, setisCreatingChat] = useState(false)\r\n    const [search, setsearch] = useState('')\r\n    const [users, setusers] = useState<string[]>([props.currentUser])\r\n    const [newChat, setNewChat] = useState('')\r\n    const { data, loading, error } = useQuery<users>(USERS)\r\n    const [createChat] = useMutation<createChat, createChatVariables>(CREATE_CHAT)\r\n    const createChatUser = () => {\r\n        createChat({\r\n            variables: {\r\n                createChatInput: {\r\n                    ChatName: newChat,\r\n                    description: '',\r\n                    users: users\r\n                }\r\n            }\r\n        })\r\n\r\n        setisCreatingChat(false)\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setsearch('')\r\n    }, [isCreatingChat])\r\n\r\n    const renderChats = () => {\r\n        const result = props.chats.filter((chat) => chat.ChatName.includes(search));\r\n        return result.map((chat) => {\r\n            const selected = chat.id === props.currentChat\r\n            return <ChatCard selected={selected} key={chat.id} onClick={props.onClick} id={chat.id} chat={chat.ChatName} description={chat.description} image={\"https://images.unsplash.com/photo-1541250628459-d8f2f0157289?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjQzMzEwfQ&auto=format&fit=crop&w=1350&q=80\"} />;\r\n        });\r\n    }\r\n    const renderUsers = () => {\r\n        const result = data ? data.users.filter((user) => (user.email.includes(search) || users.includes(user.id)) && user.id !== props.currentUser) : [];\r\n        return result.map((user) => {\r\n            const selected = users.find((selectedUser) => selectedUser === user.id) ? true : false;\r\n\r\n\r\n            return <UserCard selected={selected} onClick={() => {\r\n                users.find((selectedUser) => selectedUser === user.id) ?\r\n                    setusers(users.filter((selectedUser) => selectedUser !== user.id)) : setusers([...users, user.id])\r\n            }} key={user.id} id={user.id} username={user.username} email={user.email} image={\"https://images.unsplash.com/photo-1541250628459-d8f2f0157289?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjQzMzEwfQ&auto=format&fit=crop&w=1350&q=80\"} />;\r\n        })\r\n    }\r\n\r\n    const renderOptions = () => {\r\n        if (isCreatingChat) {\r\n            return <div className='bg-customBlue-light h-full pl-5 rounded-l-3xl overflow-auto w-full relative'>\r\n                <div className='flex justify-between'>\r\n                    <button className='text-white' onClick={() => setisCreatingChat(false)}>Back</button>\r\n                    <SearchField placeholder='enter email of user' search={search} onChange={setsearch} />\r\n                </div>\r\n\r\n\r\n                {renderUsers()}\r\n                <div className='absolute bottom-0  left-0 right-0 h-14 p-2 flex justify-between justify-items-center w-full bg-customGreen'>\r\n                    <input\r\n                        className=\" outline-none font-sans flex-grow py-2 px-2 rounded-full border border-gray-300 bg-gray-50\"\r\n                        name='newChat'\r\n                        placeholder=\"New Chat Name\"\r\n\r\n                        onChange={(e) => setNewChat(e.target.value)}\r\n\r\n                    />\r\n                    <button className=\"text-white p-2\" onClick={() => createChatUser()}  >\r\n                        Add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        } else {\r\n            return (<div className='bg-customBlue-light h-full pl-5 rounded-l-3xl overflow-auto w-full relative'>\r\n                <div className='flex justify-between '>\r\n                    <div onClick={() => setisCreatingChat(true)} className='cursor-pointer rounded-full  h-12 w-12 bg-customBlue-dark text-white my-auto pt-3'>\r\n                        <svg className='block mx-auto my-auto text-white' width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"><path fill=\"currentColor\" d=\"M11 11v-11h1v11h11v1h-11v11h-1v-11h-11v-1h11z\" /></svg>\r\n                    </div>\r\n                    <SearchField placeholder='enter chat name' search={search} onChange={setsearch} />\r\n                </div>\r\n\r\n                {renderChats()}\r\n\r\n            </div>);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return <React.Fragment>\r\n        {renderOptions()}\r\n    </React.Fragment>;\r\n\r\n}\r\n\r\nexport default Chats;","F:\\programming\\chat-web\\client\\src\\pages\\Sign.tsx",["58","59"],"F:\\programming\\chat-web\\client\\src\\Components\\RegisterForm.tsx",[],"F:\\programming\\chat-web\\client\\src\\App.tsx",["60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":23,"nodeType":"67","messageId":"68","endLine":1,"endColumn":31},{"ruleId":"65","severity":1,"message":"69","line":3,"column":10,"nodeType":"67","messageId":"68","endLine":3,"endColumn":23},{"ruleId":"65","severity":1,"message":"70","line":3,"column":25,"nodeType":"67","messageId":"68","endLine":3,"endColumn":37},{"ruleId":"65","severity":1,"message":"71","line":3,"column":39,"nodeType":"67","messageId":"68","endLine":3,"endColumn":47},{"ruleId":"65","severity":1,"message":"72","line":3,"column":49,"nodeType":"67","messageId":"68","endLine":3,"endColumn":62},{"ruleId":"65","severity":1,"message":"73","line":4,"column":10,"nodeType":"67","messageId":"68","endLine":4,"endColumn":22},{"ruleId":"65","severity":1,"message":"74","line":4,"column":24,"nodeType":"67","messageId":"68","endLine":4,"endColumn":45},{"ruleId":"65","severity":1,"message":"75","line":5,"column":10,"nodeType":"67","messageId":"68","endLine":5,"endColumn":21},{"ruleId":"65","severity":1,"message":"76","line":6,"column":10,"nodeType":"67","messageId":"68","endLine":6,"endColumn":18},{"ruleId":"77","severity":1,"message":"78","line":41,"column":8,"nodeType":"79","endLine":41,"endColumn":28,"suggestions":"80"},{"ruleId":"65","severity":1,"message":"81","line":44,"column":27,"nodeType":"67","messageId":"68","endLine":44,"endColumn":34},{"ruleId":"65","severity":1,"message":"82","line":44,"column":36,"nodeType":"67","messageId":"68","endLine":44,"endColumn":41},{"ruleId":"83","severity":1,"message":"84","line":26,"column":7,"nodeType":"67","messageId":"85","endLine":26,"endColumn":34},{"ruleId":"65","severity":1,"message":"81","line":31,"column":19,"nodeType":"67","messageId":"68","endLine":31,"endColumn":26},{"ruleId":"65","severity":1,"message":"82","line":31,"column":28,"nodeType":"67","messageId":"68","endLine":31,"endColumn":33},{"ruleId":"65","severity":1,"message":"86","line":16,"column":12,"nodeType":"67","messageId":"68","endLine":16,"endColumn":24},{"ruleId":"65","severity":1,"message":"87","line":16,"column":26,"nodeType":"67","messageId":"68","endLine":16,"endColumn":41},{"ruleId":"65","severity":1,"message":"81","line":12,"column":17,"nodeType":"67","messageId":"68","endLine":12,"endColumn":24},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"@typescript-eslint/no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","'CHAT_MESSAGES' is defined but never used.","'CURRENT_USER' is defined but never used.","'MESSAGES' is defined but never used.","'MESSAGE_ADDED' is defined but never used.","'chatMessages' is defined but never used.","'chatMessagesVariables' is defined but never used.","'currentUser' is defined but never used.","'messages' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["90"],"'loading' is assigned a value but never used.","'error' is assigned a value but never used.","@typescript-eslint/no-redeclare","'Chats' is already defined.","redeclared","'errorMessage' is assigned a value but never used.","'seterrorMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [props, props.chatMessages]",{"range":"93","text":"94"},[1352,1372],"[props, props.chatMessages]"]