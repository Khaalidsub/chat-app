[{"/app/src/index.tsx":"1","/app/src/App.tsx":"2","/app/src/pages/login.tsx":"3","/app/src/widgets/ButtonForm.tsx":"4","/app/src/pages/Sign.tsx":"5","/app/src/pages/Home.tsx":"6","/app/src/utilities/schema.ts":"7","/app/src/utilities/constants.ts":"8","/app/src/widgets/InputFieldForm.tsx":"9","/app/src/reportWebVitals.ts":"10","/app/src/widgets/ChatCard.tsx":"11","/app/src/pages/chat.tsx":"12","/app/src/widgets/Message.tsx":"13","/app/src/pages/register.tsx":"14","/app/src/pages/chats.tsx":"15","/app/src/widgets/SearchField.tsx":"16","/app/src/widgets/UserCard.tsx":"17","/app/src/Components/RegisterForm.tsx":"18"},{"size":2350,"mtime":1611763309308,"results":"19","hashOfConfig":"20"},{"size":865,"mtime":1611316665811,"results":"21","hashOfConfig":"20"},{"size":1176,"mtime":1611762236685,"results":"22","hashOfConfig":"20"},{"size":330,"mtime":1611592868132,"results":"23","hashOfConfig":"20"},{"size":4102,"mtime":1611664057454,"results":"24","hashOfConfig":"20"},{"size":2914,"mtime":1611248115580,"results":"25","hashOfConfig":"20"},{"size":2152,"mtime":1609511304020,"results":"26","hashOfConfig":"20"},{"size":699,"mtime":1611311729803,"results":"27","hashOfConfig":"20"},{"size":848,"mtime":1611663469905,"results":"28","hashOfConfig":"20"},{"size":425,"mtime":1607328705283,"results":"29","hashOfConfig":"20"},{"size":968,"mtime":1609511304023,"results":"30","hashOfConfig":"20"},{"size":4601,"mtime":1611305650589,"results":"31","hashOfConfig":"20"},{"size":926,"mtime":1609511304025,"results":"32","hashOfConfig":"20"},{"size":833,"mtime":1611243819060,"results":"33","hashOfConfig":"20"},{"size":5116,"mtime":1611305175655,"results":"34","hashOfConfig":"20"},{"size":696,"mtime":1609511304027,"results":"35","hashOfConfig":"20"},{"size":954,"mtime":1609511304028,"results":"36","hashOfConfig":"20"},{"size":1592,"mtime":1611664228768,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"1jejgda",{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"65"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/app/src/index.tsx",["86","87","88","89","90","91","92","93","94"],"import React, { useContext, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache, NormalizedCacheObject, split } from '@apollo/client';\r\nimport { WebSocketLink } from '@apollo/client/link/ws';\r\nimport { getMainDefinition } from '@apollo/client/utilities';\r\nimport { authHttpLink, AUTH_TOKEN } from './utilities/constants';\r\nimport { useClient } from './ApolloClient';\r\nimport { AuthContext, AuthContextProvider } from './AuthContext';\r\n\r\n// let cache = new InMemoryCache();\r\n\r\n// const api = process.env.NODE_ENV === 'development' ? 'localhost/chat/graphql' : 'localhost/chat/graphql';\r\n// const ws = process.env.NODE_ENV === 'development' ? 'localhost/chat/graphql' : 'localhost/chat/graphql';\r\n\r\n\r\n\r\n// const wsLink =\r\n//   new WebSocketLink({\r\n\r\n//     uri: `ws://${ws}`,\r\n//     options: {\r\n//       reconnect: true,\r\n//       connectionParams: () => ({\r\n//         authorization: `Bearer ${localStorage.getItem(AUTH_TOKEN)}`,\r\n//       }),\r\n//     },\r\n//   })\r\n\r\n// const httpLink = new HttpLink({\r\n//   uri: `http://${api}`,\r\n\r\n// })\r\n\r\n// const splitLink = split(\r\n//   ({ query }) => {\r\n//     const definition = getMainDefinition(query);\r\n//     return (\r\n//       definition.kind === 'OperationDefinition' &&\r\n//       definition.operation === 'subscription'\r\n//     );\r\n//   },\r\n//   wsLink,\r\n//   authHttpLink.concat(httpLink),\r\n// );\r\n\r\n\r\nconst RenderApp = () => {\r\n  const { auth } = useContext(AuthContext)\r\n  const authClient = useClient();\r\n  useEffect(() => {\r\n    console.log('in renderApp :', auth);\r\n  }, [auth])\r\n\r\n  // const client: ApolloClient<NormalizedCacheObject> = new ApolloClient({ cache: authClient.cache, link: authClient.link })\r\n  return (\r\n    <ApolloProvider client={authClient}>\r\n      <App />\r\n    </ApolloProvider>)\r\n}\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AuthContextProvider >\r\n      <RenderApp />\r\n    </AuthContextProvider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","/app/src/App.tsx",["95","96","97","98"],"/app/src/pages/login.tsx",["99"],"import { useMutation } from \"@apollo/client\";\r\nimport React, { useContext } from \"react\";\r\nimport { AuthContext } from \"../AuthContext\";\r\nimport LoginForm from \"../Components/LoginForm\";\r\nimport { AUTH_TOKEN } from \"../utilities/constants\";\r\nimport { LOGIN_USER } from \"../utilities/schema\";\r\nimport * as LoginTypes from \"../utilities/__generated__/login\";\r\n\r\nexport interface LoginProps {\r\n\r\n    seterrorMessage: Function\r\n    refetchCurrentUser: Function\r\n}\r\n\r\nexport interface LoginState {\r\n\r\n}\r\n\r\nconst Login = (props: LoginProps) => {\r\n    const { auth, setAuth } = useContext(AuthContext)\r\n    const [login, { loading, error, }] = useMutation<LoginTypes.login, LoginTypes.loginVariables>(LOGIN_USER, {\r\n        onCompleted(data?) {\r\n\r\n\r\n            if (data && data.loginUser) {\r\n                localStorage.setItem(AUTH_TOKEN, data.loginUser)\r\n                setAuth(data.loginUser, props.refetchCurrentUser)\r\n\r\n            }\r\n\r\n\r\n            // \r\n\r\n        }\r\n    })\r\n    if (loading) {\r\n        return <div>loading</div>\r\n    }\r\n    if (error) {\r\n        props.seterrorMessage(error)\r\n    }\r\n\r\n    return (<LoginForm login={login} />);\r\n\r\n}\r\n\r\nexport default Login;",["100","101"],"/app/src/widgets/ButtonForm.tsx",[],"/app/src/pages/Sign.tsx",["102","103","104"],"import React, { useState } from \"react\";\r\nimport SignUp from \"./register\";\r\nimport SignIn from \"./login\";\r\n\r\nexport interface SignProps {\r\n    fetchCurrentUser: Function;\r\n}\r\n\r\nexport interface SignState { }\r\n\r\nexport enum SignType {\r\n    register = \"Register\",\r\n    login = \"Login\",\r\n}\r\n\r\nconst Sign1: React.FC<SignProps> = (props: SignProps) => {\r\n    const [signType, setsignType] = useState(SignType.register);\r\n    const [errorMessage, seterrorMessage] = useState(\"\");\r\n    const RenderTypeForm = () => {\r\n        return (\r\n            <div className=\" h-8 mx-auto mt-12 max-w-xs text-center grid grid-cols-2 bg-secondary-background rounded-full border border-customBlue\">\r\n                <button\r\n                    onClick={() => setsignType(SignType.register)}\r\n                    className=\"my-auto border-r  focus:text-secondary focus:shadow-inner rounded-full cursor-pointer focus:outline-none text-primary\"\r\n                >\r\n                    Sign Up\r\n        </button>\r\n\r\n                <button\r\n                    onClick={() => setsignType(SignType.login)}\r\n                    className=\"my-auto border-l focus:text-secondary   focus:shadow-inner rounded-full cursor-pointer  focus:outline-none text-primary\"\r\n                >\r\n                    Sign In\r\n        </button>\r\n            </div>\r\n        );\r\n    };\r\n    const TypeForm = () => {\r\n        return signType === SignType.register ? <SignUp setsignType={() => setsignType(SignType.login)} seterrorMessage={seterrorMessage} /> : <SignIn seterrorMessage={seterrorMessage} refetchCurrentUser={props.fetchCurrentUser} />;\r\n    };\r\n    return (\r\n        <div className=\" w-2/3 my-auto\">\r\n            <RenderTypeForm />\r\n\r\n            <div className=\"w-full max-w-xl mx-auto mt-4 mb-12 border border-primary pl-5 pr-10 pb-10 md:pl-20 md:pr-20 md:pb-20 pt-5 rounded-lg shadow-lg\">\r\n                <h3 className=\"text-center text-3xl mb-4 font-bold text-primary  \">\r\n                    {signType}\r\n                </h3>\r\n                <TypeForm />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst Sign: React.FC<SignProps> = (props: SignProps) => {\r\n    const [signType, setsignType] = useState(SignType.register);\r\n    const [errorMessage, seterrorMessage] = useState(\"\");\r\n    const RenderTypeForm = () => {\r\n        return (\r\n            <div className=\"flex md:px-3 flex-column md:flex-row justify-between justify-items-center\">\r\n                <button\r\n                    onClick={() => setsignType(SignType.register)}\r\n                    className=\"bg-customBlue px-3 py-1 w-1/2 mr-4  focus:bg-customBlue-dark focus:shadow-inner rounded-xl cursor-pointer shadow-md text-white\"\r\n                >\r\n                    Sign Up\r\n        </button>\r\n\r\n                <button\r\n                    onClick={() => setsignType(SignType.login)}\r\n                    className=\"bg-customBlue focus:bg-customBlue-dark px-3 ml-4 py-1 w-1/2 focus:shadow-inner rounded-xl cursor-pointer shadow-md text-white\"\r\n                >\r\n                    Sign In\r\n        </button>\r\n            </div>\r\n        );\r\n    };\r\n    const TypeForm = () => {\r\n        return signType === SignType.register ? <SignUp setsignType={() => setsignType(SignType.login)} seterrorMessage={seterrorMessage} /> : <SignIn seterrorMessage={seterrorMessage} refetchCurrentUser={props.fetchCurrentUser} />;\r\n    };\r\n    return (\r\n        <div className=\"w-2/3 md:w-1/2  lg:w-2/5 p-4 my-auto flex flex-col justify-between align-center border rounded-xl\">\r\n            <h3 className=\"text-center text-3xl mb-4 font-thin text-primary  \">\r\n                {signType}\r\n            </h3>\r\n            <div className=\"mx-auto m-5\">\r\n                <h3 className=\"text-center text-xl italic\">Welcome</h3>\r\n            </div>\r\n            <div className=\"w-full max-w-sm mx-auto\">\r\n                <RenderTypeForm />\r\n            </div>\r\n\r\n\r\n            <div className=\"w-full max-w-xl mx-auto mt-4  px-2 pb-10 lg:px-20 md:px-5 md:pb-2 pt-5 \">\r\n\r\n                <TypeForm />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Sign;\r\n","/app/src/pages/Home.tsx",["105","106","107"],"import { useQuery } from '@apollo/client'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { CHATS, CHAT_MESSAGES, MESSAGE_ADDED } from '../utilities/schema'\r\nimport { chatMessages, chatMessagesVariables } from '../utilities/__generated__/chatMessages'\r\nimport { chats } from '../utilities/__generated__/chats'\r\nimport { currentUser_currentUser } from '../utilities/__generated__/currentUser'\r\nimport { onChatMessage } from '../utilities/__generated__/onChatMessage'\r\nimport Chat from './chat'\r\nimport Chats from './chats'\r\n\r\nexport interface HomeProps {\r\n    currentUser: currentUser_currentUser\r\n}\r\n\r\nfunction Home(props: HomeProps) {\r\n    const { data, loading, error } = useQuery<chats>(CHATS)\r\n    const [currentChat, setCurrentChat] = useState('');\r\n    const [showChat, setshowChat] = useState(true)\r\n    // useEffect(() => {\r\n\r\n    //     // if (showChat) setCurrentChat(null)\r\n\r\n    // }, [showChat])\r\n    const { ...result } = useQuery<chatMessages, chatMessagesVariables>(CHAT_MESSAGES, { variables: { id: currentChat } })\r\n    const settingCurrentChat = (value: string) => {\r\n        setCurrentChat(value)\r\n        setshowChat(false);\r\n    }\r\n\r\n\r\n    const subscribeToNewMessages = () =>\r\n        result.subscribeToMore<onChatMessage>({\r\n            document: MESSAGE_ADDED,\r\n            variables: { id: currentChat },\r\n            updateQuery: (prev, { subscriptionData }) => {\r\n                console.log('in sub sub', subscriptionData);\r\n\r\n                if (!subscriptionData.data) return prev\r\n                const newMessages = subscriptionData.data.onChatMessage\r\n                return Object.assign({}, prev, {\r\n                    chatMessages: [...prev.chatMessages, newMessages]\r\n                });\r\n\r\n\r\n            }\r\n\r\n        })\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"flex justify-center\">\r\n\r\n\r\n                <div className=\"md:h-2/3 md:w-2/3 w-full h-4/5 px-4  mx-auto my-auto flex flex-row py-px border border-gray-50 bg-gray-50 rounded-3xl shadow-lg\">\r\n                    <div className={`md:w-2/5 md:flex w-full ${showChat ? '' : 'hidden'}`}>\r\n                        <Chats currentChat={currentChat} chats={data ? data.chats : []} onClick={settingCurrentChat} currentUser={props.currentUser.id} />\r\n                    </div>\r\n\r\n                    <div className={`w-full md:w-3/5 pt-3 rounded-3xl md:block ${!showChat ? '' : 'hidden'} `}>\r\n                        <button className='text-customBlue pl-2 pb-2 md:hidden' onClick={() => setshowChat(true)}>Back</button>\r\n                        {currentChat.length > 1 ? <Chat subscribeToMore={subscribeToNewMessages} chatMessages={result.data ? result.data.chatMessages : []} user={props.currentUser} currentChat={currentChat} /> : <div></div>}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Home","/app/src/utilities/schema.ts",[],["108","109"],"/app/src/utilities/constants.ts",[],["110","111"],"/app/src/widgets/InputFieldForm.tsx",[],"/app/src/reportWebVitals.ts",[],["112","113"],"/app/src/widgets/ChatCard.tsx",[],["114","115"],"/app/src/pages/chat.tsx",["116","117","118","119","120","121","122","123","124","125","126","127"],"import { useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { CHAT_MESSAGES, CURRENT_USER, MESSAGES, MESSAGE_ADDED, SEND_MESSAGE } from \"../utilities/schema\";\r\nimport { chatMessages, chatMessagesVariables, chatMessages_chatMessages } from \"../utilities/__generated__/chatMessages\";\r\nimport { currentUser, currentUser_currentUser } from \"../utilities/__generated__/currentUser\";\r\nimport { messages } from \"../utilities/__generated__/messages\";\r\nimport { sendMessage, sendMessageVariables } from \"../utilities/__generated__/sendMessage\";\r\nimport Message from \"../widgets/Message\";\r\n\r\nexport interface ChatProps {\r\n    currentChat: string\r\n    user: currentUser_currentUser\r\n    chatMessages: chatMessages_chatMessages[]\r\n    subscribeToMore: Function\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Chat: React.FC<ChatProps> = (props: ChatProps) => {\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n    const scrollChat = useRef<any>(null)\r\n\r\n    const scrollToBottom = () => {\r\n        scrollChat.current.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n\r\n    useEffect(scrollToBottom, [props.chatMessages]);\r\n\r\n    useEffect(() => {\r\n        console.log('hello , i have been called', props.chatMessages);\r\n\r\n        const unsubscribe = props.subscribeToMore();\r\n\r\n        return () => unsubscribe()\r\n    }, [props.chatMessages])\r\n\r\n\r\n    const [sendMessage, { loading, error }] = useMutation<sendMessage, sendMessageVariables>(SEND_MESSAGE)\r\n\r\n    const onKeyPress = (e: any) => {\r\n        if (e.key === 'Enter') {\r\n            sendMessage({ variables: { createMessageInput: { chat: props.currentChat, message: message, sender: props.user.id, } } })\r\n            setMessage('')\r\n        }\r\n\r\n\r\n    }\r\n    const ChatMessages = () => {\r\n        return (\r\n            <React.Fragment>\r\n                {  props.chatMessages.map((message) => {\r\n                    const current = message.sender.id === props.user.id ? true : false;\r\n                    const color = message.sender.id === props.user.id ? 'green-100' : 'white';\r\n\r\n                    return <Message current={current} key={message.id} color={color} message={message.message} user={message.sender.username} image=\"https://images.unsplash.com/photo-1541250628459-d8f2f0157289?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjQzMzEwfQ&auto=format&fit=crop&w=1350&q=80\" />\r\n                })}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\" relative h-full\">\r\n\r\n                <div className='h-4/5 w-full overflow-auto'>\r\n\r\n\r\n\r\n\r\n\r\n                    <ChatMessages />\r\n\r\n                    <div ref={scrollChat} />\r\n\r\n                </div>\r\n\r\n                <div className=\"absolute bottom-0 left-0 right-0 w-full h-16 flex justify-between bg-blue-100 outline-none rounded-xl\" >\r\n                    <textarea\r\n                        className=\" outline-none font-sans flex-grow m-2 py-2 px-4 mr-1 rounded-full border border-gray-300 bg-gray-50 resize-none\"\r\n\r\n                        placeholder=\"Message...\"\r\n\r\n                        rows={1}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n\r\n                        onKeyPress={onKeyPress}\r\n                        value={message}\r\n\r\n                    ></textarea>\r\n                    <button className=\"m-2\" onClick={() => { sendMessage({ variables: { createMessageInput: { chat: props.currentChat, message: message, sender: props.user.id, } } }); setMessage('') }} >\r\n                        <svg\r\n                            className=\"svg-inline--fa text-customBlue-light fa-paper-plane fa-w-16 w-12 h-12 py-2 mr-2\"\r\n                            aria-hidden=\"true\"\r\n                            focusable=\"false\"\r\n                            data-prefix=\"fas\"\r\n                            data-icon=\"paper-plane\"\r\n                            role=\"img\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            viewBox=\"0 0 512 512\"\r\n                        >\r\n                            <path\r\n                                fill=\"currentColor\"\r\n                                d=\"M476 3.2L12.5 270.6c-18.1 10.4-15.8 35.6 2.2 43.2L121 358.4l287.3-253.2c5.5-4.9 13.3 2.6 8.6 8.3L176 407v80.5c0 23.6 28.5 32.9 42.5 15.8L282 426l124.6 52.2c14.2 6 30.4-2.9 33-18.2l72-432C515 7.8 493.3-6.8 476 3.2z\"\r\n                            />\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </React.Fragment >\r\n    );\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Chat;",["128","129"],"/app/src/widgets/Message.tsx",[],"/app/src/pages/register.tsx",[],"/app/src/pages/chats.tsx",["130","131","132"],"import { useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { CREATE_CHAT, USERS } from \"../utilities/schema\";\r\nimport { chats_chats } from \"../utilities/__generated__/chats\";\r\nimport { createChatVariables, createChat } from \"../utilities/__generated__/createChat\";\r\nimport { users } from \"../utilities/__generated__/users\";\r\nimport ChatCard from \"../widgets/ChatCard\";\r\nimport SearchField from \"../widgets/SearchField\";\r\nimport UserCard from \"../widgets/UserCard\";\r\n\r\nexport interface ChatsProps {\r\n    chats: chats_chats[]\r\n    onClick: Function;\r\n    currentUser: string\r\n    currentChat: string\r\n\r\n}\r\n\r\nexport interface Chats {\r\n    isCreatingChat: boolean\r\n\r\n\r\n}\r\n\r\n\r\nconst Chats: React.FC<ChatsProps> = (props: ChatsProps) => {\r\n    const [isCreatingChat, setisCreatingChat] = useState(false)\r\n    const [search, setsearch] = useState('')\r\n    const [users, setusers] = useState<string[]>([props.currentUser])\r\n    const [newChat, setNewChat] = useState('')\r\n    const { data, loading, error } = useQuery<users>(USERS)\r\n    const [createChat] = useMutation<createChat, createChatVariables>(CREATE_CHAT)\r\n    const createChatUser = () => {\r\n        createChat({\r\n            variables: {\r\n                createChatInput: {\r\n                    ChatName: newChat,\r\n                    description: '',\r\n                    users: users\r\n                }\r\n            }\r\n        })\r\n\r\n        setisCreatingChat(false)\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setsearch('')\r\n    }, [isCreatingChat])\r\n\r\n    const renderChats = () => {\r\n        const result = props.chats.filter((chat) => chat.ChatName.includes(search));\r\n        return result.map((chat) => {\r\n            const selected = chat.id === props.currentChat\r\n            return <ChatCard selected={selected} key={chat.id} onClick={props.onClick} id={chat.id} chat={chat.ChatName} description={chat.description} image={\"https://images.unsplash.com/photo-1541250628459-d8f2f0157289?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjQzMzEwfQ&auto=format&fit=crop&w=1350&q=80\"} />;\r\n        });\r\n    }\r\n    const renderUsers = () => {\r\n        const result = data ? data.users.filter((user) => (user.email.includes(search) || users.includes(user.id)) && user.id !== props.currentUser) : [];\r\n        return result.map((user) => {\r\n            const selected = users.find((selectedUser) => selectedUser === user.id) ? true : false;\r\n\r\n\r\n            return <UserCard selected={selected} onClick={() => {\r\n                users.find((selectedUser) => selectedUser === user.id) ?\r\n                    setusers(users.filter((selectedUser) => selectedUser !== user.id)) : setusers([...users, user.id])\r\n            }} key={user.id} id={user.id} username={user.username} email={user.email} image={\"https://images.unsplash.com/photo-1541250628459-d8f2f0157289?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjQzMzEwfQ&auto=format&fit=crop&w=1350&q=80\"} />;\r\n        })\r\n    }\r\n\r\n    const renderOptions = () => {\r\n        if (isCreatingChat) {\r\n            return <div className='bg-customBlue-light h-full pl-5 rounded-l-3xl overflow-auto w-full relative'>\r\n                <div className='flex justify-between'>\r\n                    <button className='text-white' onClick={() => setisCreatingChat(false)}>Back</button>\r\n                    <SearchField placeholder='enter email of user' search={search} onChange={setsearch} />\r\n                </div>\r\n\r\n\r\n                {renderUsers()}\r\n                <div className='absolute bottom-0  left-0 right-0 h-14 p-2 flex justify-between justify-items-center w-full bg-customGreen'>\r\n                    <input\r\n                        className=\" outline-none font-sans flex-grow py-2 px-2 rounded-full border border-gray-300 bg-gray-50\"\r\n                        name='newChat'\r\n                        placeholder=\"New Chat Name\"\r\n\r\n                        onChange={(e) => setNewChat(e.target.value)}\r\n\r\n                    />\r\n                    <button className=\"text-white p-2\" onClick={() => createChatUser()}  >\r\n                        Add\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        } else {\r\n            return (<div className='bg-customBlue-light h-full pl-5 rounded-l-3xl overflow-auto w-full relative'>\r\n                <div className='flex justify-between '>\r\n                    <div onClick={() => setisCreatingChat(true)} className='cursor-pointer rounded-full  h-12 w-12 bg-customBlue-dark text-white my-auto pt-3'>\r\n                        <svg className='block mx-auto my-auto text-white' width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fillRule=\"evenodd\" clipRule=\"evenodd\"><path fill=\"currentColor\" d=\"M11 11v-11h1v11h11v1h-11v11h-1v-11h-11v-1h11z\" /></svg>\r\n                    </div>\r\n                    <SearchField placeholder='enter chat name' search={search} onChange={setsearch} />\r\n                </div>\r\n\r\n                {renderChats()}\r\n\r\n            </div>);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return <React.Fragment>\r\n        {renderOptions()}\r\n    </React.Fragment>;\r\n\r\n}\r\n\r\nexport default Chats;","/app/src/widgets/SearchField.tsx",["133"],"/app/src/widgets/UserCard.tsx",[],"/app/src/Components/RegisterForm.tsx",[],{"ruleId":"134","severity":1,"message":"135","line":6,"column":10,"nodeType":"136","messageId":"137","endLine":6,"endColumn":22},{"ruleId":"134","severity":1,"message":"138","line":6,"column":40,"nodeType":"136","messageId":"137","endLine":6,"endColumn":48},{"ruleId":"134","severity":1,"message":"139","line":6,"column":50,"nodeType":"136","messageId":"137","endLine":6,"endColumn":63},{"ruleId":"134","severity":1,"message":"140","line":6,"column":65,"nodeType":"136","messageId":"137","endLine":6,"endColumn":86},{"ruleId":"134","severity":1,"message":"141","line":6,"column":88,"nodeType":"136","messageId":"137","endLine":6,"endColumn":93},{"ruleId":"134","severity":1,"message":"142","line":7,"column":10,"nodeType":"136","messageId":"137","endLine":7,"endColumn":23},{"ruleId":"134","severity":1,"message":"143","line":8,"column":10,"nodeType":"136","messageId":"137","endLine":8,"endColumn":27},{"ruleId":"134","severity":1,"message":"144","line":9,"column":10,"nodeType":"136","messageId":"137","endLine":9,"endColumn":22},{"ruleId":"134","severity":1,"message":"145","line":9,"column":24,"nodeType":"136","messageId":"137","endLine":9,"endColumn":34},{"ruleId":"134","severity":1,"message":"146","line":2,"column":10,"nodeType":"136","messageId":"137","endLine":2,"endColumn":23},{"ruleId":"134","severity":1,"message":"147","line":3,"column":17,"nodeType":"136","messageId":"137","endLine":3,"endColumn":26},{"ruleId":"134","severity":1,"message":"148","line":12,"column":17,"nodeType":"136","messageId":"137","endLine":12,"endColumn":24},{"ruleId":"134","severity":1,"message":"149","line":12,"column":26,"nodeType":"136","messageId":"137","endLine":12,"endColumn":31},{"ruleId":"134","severity":1,"message":"150","line":20,"column":13,"nodeType":"136","messageId":"137","endLine":20,"endColumn":17},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"134","severity":1,"message":"155","line":16,"column":7,"nodeType":"136","messageId":"137","endLine":16,"endColumn":33},{"ruleId":"134","severity":1,"message":"156","line":18,"column":12,"nodeType":"136","messageId":"137","endLine":18,"endColumn":24},{"ruleId":"134","severity":1,"message":"156","line":58,"column":12,"nodeType":"136","messageId":"137","endLine":58,"endColumn":24},{"ruleId":"134","severity":1,"message":"147","line":2,"column":17,"nodeType":"136","messageId":"137","endLine":2,"endColumn":26},{"ruleId":"134","severity":1,"message":"148","line":16,"column":19,"nodeType":"136","messageId":"137","endLine":16,"endColumn":26},{"ruleId":"134","severity":1,"message":"149","line":16,"column":28,"nodeType":"136","messageId":"137","endLine":16,"endColumn":33},{"ruleId":"151","replacedBy":"157"},{"ruleId":"153","replacedBy":"158"},{"ruleId":"151","replacedBy":"159"},{"ruleId":"153","replacedBy":"160"},{"ruleId":"151","replacedBy":"161"},{"ruleId":"153","replacedBy":"162"},{"ruleId":"151","replacedBy":"163"},{"ruleId":"153","replacedBy":"164"},{"ruleId":"134","severity":1,"message":"165","line":1,"column":23,"nodeType":"136","messageId":"137","endLine":1,"endColumn":31},{"ruleId":"134","severity":1,"message":"166","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":23},{"ruleId":"134","severity":1,"message":"167","line":3,"column":25,"nodeType":"136","messageId":"137","endLine":3,"endColumn":37},{"ruleId":"134","severity":1,"message":"168","line":3,"column":39,"nodeType":"136","messageId":"137","endLine":3,"endColumn":47},{"ruleId":"134","severity":1,"message":"169","line":3,"column":49,"nodeType":"136","messageId":"137","endLine":3,"endColumn":62},{"ruleId":"134","severity":1,"message":"170","line":4,"column":10,"nodeType":"136","messageId":"137","endLine":4,"endColumn":22},{"ruleId":"134","severity":1,"message":"171","line":4,"column":24,"nodeType":"136","messageId":"137","endLine":4,"endColumn":45},{"ruleId":"134","severity":1,"message":"172","line":5,"column":10,"nodeType":"136","messageId":"137","endLine":5,"endColumn":21},{"ruleId":"134","severity":1,"message":"173","line":6,"column":10,"nodeType":"136","messageId":"137","endLine":6,"endColumn":18},{"ruleId":"174","severity":1,"message":"175","line":41,"column":8,"nodeType":"176","endLine":41,"endColumn":28,"suggestions":"177"},{"ruleId":"134","severity":1,"message":"148","line":44,"column":27,"nodeType":"136","messageId":"137","endLine":44,"endColumn":34},{"ruleId":"134","severity":1,"message":"149","line":44,"column":36,"nodeType":"136","messageId":"137","endLine":44,"endColumn":41},{"ruleId":"151","replacedBy":"178"},{"ruleId":"153","replacedBy":"179"},{"ruleId":"180","severity":1,"message":"181","line":26,"column":7,"nodeType":"136","messageId":"182","endLine":26,"endColumn":34},{"ruleId":"134","severity":1,"message":"148","line":31,"column":19,"nodeType":"136","messageId":"137","endLine":31,"endColumn":26},{"ruleId":"134","severity":1,"message":"149","line":31,"column":28,"nodeType":"136","messageId":"137","endLine":31,"endColumn":33},{"ruleId":"134","severity":1,"message":"183","line":1,"column":8,"nodeType":"136","messageId":"137","endLine":1,"endColumn":17},"@typescript-eslint/no-unused-vars","'ApolloClient' is defined but never used.","Identifier","unusedVar","'HttpLink' is defined but never used.","'InMemoryCache' is defined but never used.","'NormalizedCacheObject' is defined but never used.","'split' is defined but never used.","'WebSocketLink' is defined but never used.","'getMainDefinition' is defined but never used.","'authHttpLink' is defined but never used.","'AUTH_TOKEN' is defined but never used.","'NetworkStatus' is defined but never used.","'useEffect' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'auth' is assigned a value but never used.","no-native-reassign",["184"],"no-negated-in-lhs",["185"],"'Sign1' is assigned a value but never used.","'errorMessage' is assigned a value but never used.",["184"],["185"],["184"],["185"],["184"],["185"],["184"],["185"],"'useQuery' is defined but never used.","'CHAT_MESSAGES' is defined but never used.","'CURRENT_USER' is defined but never used.","'MESSAGES' is defined but never used.","'MESSAGE_ADDED' is defined but never used.","'chatMessages' is defined but never used.","'chatMessagesVariables' is defined but never used.","'currentUser' is defined but never used.","'messages' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["186"],["184"],["185"],"@typescript-eslint/no-redeclare","'Chats' is already defined.","redeclared","'PropTypes' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},"Update the dependencies array to be: [props, props.chatMessages]",{"range":"189","text":"190"},[1352,1372],"[props, props.chatMessages]"]